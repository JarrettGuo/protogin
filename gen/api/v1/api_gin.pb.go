// Code generated by protoc-gen-gin. DO NOT EDIT.

package apiv1

import (
	gin "github.com/gin-gonic/gin"
	http "net/http"
)

type DemoServiceHTTPServer struct {
	server DemoServiceServer
	router gin.IRouter
}

func RegisterDemoServiceServerHTTPServer(srv DemoServiceServer, r gin.IRouter) {
	s := DemoServiceHTTPServer{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

func (s *DemoServiceHTTPServer) GetUser_0(c *gin.Context) {
	var in GetUserRequest

	if err := c.ShouldBindQuery(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	in.UserId = c.Param("user_id")

	ctx := c.Request.Context()
	out, err := s.server.GetUser(ctx, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *DemoServiceHTTPServer) CreateUser_0(c *gin.Context) {
	var in CreateUserRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	ctx := c.Request.Context()
	out, err := s.server.CreateUser(ctx, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *DemoServiceHTTPServer) UpdateUser_0(c *gin.Context) {
	var in UpdateUserRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	in.UserId = c.Param("user_id")

	ctx := c.Request.Context()
	out, err := s.server.UpdateUser(ctx, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *DemoServiceHTTPServer) DeleteUser_0(c *gin.Context) {
	var in DeleteUserRequest

	if err := c.ShouldBindQuery(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	in.UserId = c.Param("user_id")

	ctx := c.Request.Context()
	out, err := s.server.DeleteUser(ctx, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *DemoServiceHTTPServer) ListUsers_0(c *gin.Context) {
	var in ListUsersRequest

	if err := c.ShouldBindQuery(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	ctx := c.Request.Context()
	out, err := s.server.ListUsers(ctx, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *DemoServiceHTTPServer) BatchOperation_0(c *gin.Context) {
	var in BatchRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	ctx := c.Request.Context()
	out, err := s.server.BatchOperation(ctx, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *DemoServiceHTTPServer) RegisterService() {
	s.router.Handle("GET", "/api/v1/users/:user_id", s.GetUser_0)
	s.router.Handle("POST", "/api/v1/users", s.CreateUser_0)
	s.router.Handle("PUT", "/api/v1/users/:user_id", s.UpdateUser_0)
	s.router.Handle("DELETE", "/api/v1/users/:user_id", s.DeleteUser_0)
	s.router.Handle("GET", "/api/v1/users", s.ListUsers_0)
	s.router.Handle("POST", "/api/v1/batch", s.BatchOperation_0)

}
